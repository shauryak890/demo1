{"ast":null,"code":"import jwt_decode from 'jwt-decode';\n\n/**\r\n * Checks if the user is authenticated by verifying the existence\r\n * and validity of the JWT token.\r\n * \r\n * @returns {boolean} - Returns true if authenticated, false otherwise.\r\n */\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    try {\n      const {\n        exp\n      } = jwt_decode(token);\n      // Check if the token is expired\n      return exp * 1000 > Date.now();\n    } catch (error) {\n      console.error('Invalid token:', error);\n      return false;\n    }\n  }\n  return false;\n};\n\n/**\r\n * Retrieves the user's role from the JWT token.\r\n * \r\n * @returns {string|null} - Returns the user's role if available, null otherwise.\r\n */\nexport const getRole = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    try {\n      const userData = jwt_decode(token);\n      return userData.role || null;\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  }\n  return null;\n};\n\n/**\r\n * Logs the user out by removing the JWT token from localStorage.\r\n */\nexport const logout = () => {\n  localStorage.removeItem('token');\n};","map":{"version":3,"names":["jwt_decode","isAuthenticated","token","localStorage","getItem","exp","Date","now","error","console","getRole","userData","role","logout","removeItem"],"sources":["C:/Users/shaur/OneDrive/Desktop/budget brilliance/frontend/src/utils/auth.js"],"sourcesContent":["import jwt_decode from 'jwt-decode';\r\n\r\n/**\r\n * Checks if the user is authenticated by verifying the existence\r\n * and validity of the JWT token.\r\n * \r\n * @returns {boolean} - Returns true if authenticated, false otherwise.\r\n */\r\nexport const isAuthenticated = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    try {\r\n      const { exp } = jwt_decode(token);\r\n      // Check if the token is expired\r\n      return exp * 1000 > Date.now();\r\n    } catch (error) {\r\n      console.error('Invalid token:', error);\r\n      return false;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Retrieves the user's role from the JWT token.\r\n * \r\n * @returns {string|null} - Returns the user's role if available, null otherwise.\r\n */\r\nexport const getRole = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    try {\r\n      const userData = jwt_decode(token);\r\n      return userData.role || null;\r\n    } catch (error) {\r\n      console.error('Error decoding token:', error);\r\n      return null;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * Logs the user out by removing the JWT token from localStorage.\r\n */\r\nexport const logout = () => {\r\n  localStorage.removeItem('token');\r\n};\r\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,YAAY;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACT,IAAI;MACF,MAAM;QAAEG;MAAI,CAAC,GAAGL,UAAU,CAACE,KAAK,CAAC;MACjC;MACA,OAAOG,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtC,OAAO,KAAK;IACd;EACF;EACA,OAAO,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,OAAO,GAAGA,CAAA,KAAM;EAC3B,MAAMR,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACT,IAAI;MACF,MAAMS,QAAQ,GAAGX,UAAU,CAACE,KAAK,CAAC;MAClC,OAAOS,QAAQ,CAACC,IAAI,IAAI,IAAI;IAC9B,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,IAAI;IACb;EACF;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMK,MAAM,GAAGA,CAAA,KAAM;EAC1BV,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;AAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}